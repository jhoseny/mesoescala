# -*- coding: utf-8 -*-
"""plot_wrf_shapefile_d01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C0H8XKIA86DFDQqXYw6iaFH59J5hEs18
"""

!pip install netCDF4

!pip install wrf-python

!apt-get install libgeos-3.5.0
!apt-get install libgeos-dev
!pip install https://github.com/matplotlib/basemap/archive/master.zip
!pip install pyproj==1.9.6

from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt

mp = Basemap(llcrnrlon=-54,llcrnrlat=-29,urcrnrlon=-48.0,urcrnrlat=-25.9,
             resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50 )

mp.drawmapboundary(fill_color='aqua')
mp.fillcontinents(lake_color='aqua')
mp.drawcoastlines()

mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')

plt.show()

!pip install h5netcdf
import h5netcdf.legacyapi as netCDF4

def shoot(lon, lat, azimuth, maxdist=None):
    """Shooter Function
    Original javascript on http://williams.best.vwh.net/gccalc.htm
    Translated to python by Thomas Lecocq
    """
    glat1 = lat * np.pi / 180.
    glon1 = lon * np.pi / 180.
    s = maxdist / 1.852
    faz = azimuth * np.pi / 180.
 
    EPS= 0.00000000005
    if ((np.abs(np.cos(glat1))<EPS) and not (np.abs(np.sin(faz))<EPS)):
        alert("Only N-S courses are meaningful, starting at a pole!")
 
    a=6378.13/1.852
    f=1/298.257223563
    r = 1 - f
    tu = r * np.tan(glat1)
    sf = np.sin(faz)
    cf = np.cos(faz)
    if (cf==0):
        b=0.
    else:
        b=2. * np.arctan2 (tu, cf)
 
    cu = 1. / np.sqrt(1 + tu * tu)
    su = tu * cu
    sa = cu * sf
    c2a = 1 - sa * sa
    x = 1. + np.sqrt(1. + c2a * (1. / (r * r) - 1.))
    x = (x - 2.) / x
    c = 1. - x
    c = (x * x / 4. + 1.) / c
    d = (0.375 * x * x - 1.) * x
    tu = s / (r * a * c)
    y = tu
    c = y + 1
    while (np.abs (y - c) > EPS):
 
        sy = np.sin(y)
        cy = np.cos(y)
        cz = np.cos(b + y)
        e = 2. * cz * cz - 1.
        c = y
        x = e * cy
        y = e + e - 1.
        y = (((sy * sy * 4. - 3.) * y * cz * d / 6. + x) *
              d / 4. - cz) * sy * d + tu
 
    b = cu * cy * cf - su * sy
    c = r * np.sqrt(sa * sa + b * b)
    d = su * cy + cu * sy * cf
    glat2 = (np.arctan2(d, c) + np.pi) % (2*np.pi) - np.pi
    c = cu * cy - su * sy * cf
    x = np.arctan2(sy * sf, c)
    c = ((-3. * c2a + 4.) * f + 4.) * c2a * f / 16.
    d = ((e * cy * c + cz) * sy * c + y) * sa
    glon2 = ((glon1 + x - (1. - c) * d * f + np.pi) % (2*np.pi)) - np.pi    
 
    baz = (np.arctan2(sa, b) + np.pi) % (2 * np.pi)
 
    glon2 *= 180./np.pi
    glat2 *= 180./np.pi
    baz *= 180./np.pi
 
    return (glon2, glat2, baz)
 

def equi(m, centerlon, centerlat, radius, *args, **kwargs):
    glon1 = centerlon
    glat1 = centerlat
    X = []
    Y = []
    for azimuth in range(0, 360):
        glon2, glat2, baz = shoot(glon1, glat1, azimuth, radius)
        X.append(glon2)
        Y.append(glat2)
    X.append(X[0])
    Y.append(Y[0])
 
    #~ m.plot(X,Y,**kwargs) #Should work, but doesn't...
    X,Y = m(X,Y)
    plt.plot(X,Y,**kwargs)

from netCDF4 import Dataset
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.cm import get_cmap
from mpl_toolkits.basemap import Basemap, addcyclic

from wrf import to_np, getvar, smooth2d, get_basemap, latlon_coords

# Open the NetCDF file
ncfile = Dataset("/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/wrfout_d01_2020-08-14_00_00_00",format='NETCDF4')


# Get the sea level pressure
slp = getvar(ncfile, "slp")

# Smooth the sea level pressure since it tends to be noisy near the
# mountains
smooth_slp = smooth2d(slp, 3, cenweight=4)

# Get the latitude and longitude points
lats, lons = latlon_coords(slp)

# Get the basemap object
bm = get_basemap(slp)

# Create a figure
fig = plt.figure(figsize=(12,9))


# Convert the lats and lons to x and y.  Make sure you convert the lats and
# lons to numpy arrays via to_np, or basemap crashes with an undefined
# RuntimeError.
x, y = bm(to_np(lons), to_np(lats))


mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
             resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50)

centerlon = -51.25
centerlat = -27.05
equi(mp, centerlon, centerlat, 3,lw=2.,color='white')

#mp.drawmapboundary(fill_color='aqua')
#mp.fillcontinents(lake_color='aqua')
#mp.drawcoastlines()

mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')


#bm.pcolormesh(x,y, smooth_slp,cmap=get_cmap("jet"))
mp.contourf(x, y, smooth_slp, 10, cmap=get_cmap("jet"))

# Add a color bar
plt.colorbar(shrink=.62)

plt.title("Sea Level Pressure (hPa)")

plt.show()

from netCDF4 import Dataset
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.cm import get_cmap

from wrf import getvar, interplevel, to_np, get_basemap, latlon_coords

# Open the NetCDF file
ncfile = Dataset("/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/wrfout_d01_2020-08-14_00_00_00",format='NETCDF4')

# Extract the pressure, geopotential height, and wind variables
ll = len(ncfile.dimensions['Time']) 

for i in range (15, 22):
  p = getvar(ncfile, "pressure",i)
  z = getvar(ncfile, "z", i, units="dm")
  ua = getvar(ncfile, "ua", i, units="kt")
  va = getvar(ncfile, "va", i, units="kt")
  wspd = getvar(ncfile,"wspd_wdir", i, units="kts")[0,:]

  # Interpolate geopotential height, u, and v winds to 500 hPa
  ht_500 = interplevel(z, p, 500)
  u_500 = interplevel(ua, p, 500)
  v_500 = interplevel(va, p, 500)
  wspd_500 = interplevel(wspd, p, 500)

 # Create the figure
  fig = plt.figure(figsize=(12,9))
  ax = plt.axes()
  
  # Get the lat/lon coordinates
  lats, lons = latlon_coords(ht_500)

  # Get the basemap object
  bm = get_basemap(ht_500)

  mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
             resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50)
  centerlon = -51.25
  centerlat = -27.05
  equi(mp, centerlon, centerlat, 3,lw=2.,color='white')

  mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')


 

  # Convert the lat/lon coordinates to x/y coordinates in the projection space
  x, y = bm(to_np(lons), to_np(lats))

  # Add the 500 hPa geopotential height contours
  levels = np.arange(560, 580, 2)
  contours = mp.contour(x, y, to_np(ht_500), levels=levels, colors="black")
  plt.clabel(contours, inline=1, fontsize=10, fmt="%i")

  # Add the wind speed contours
  levels = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
  wspd_contours = mp.contourf(x, y, to_np(wspd_500), levels=levels,
                              cmap=get_cmap("rainbow"))
  mp = plt.colorbar(wspd_contours, ax=ax, orientation="horizontal", pad=.05)
  mp.ax.set_title('kt')

  # Add the geographic boundaries
  #bm.drawcoastlines(linewidth=0.25)
  #bm.drawstates(linewidth=0.25)
  #bm.drawcountries(linewidth=0.25)

  # Add the 500 hPa wind barbs, only plotting every 125th data point.
  #bm.barbs(x[::125,::125], y[::125,::125], to_np(u_500[::125, ::125]),
  #        to_np(v_500[::125, ::125]), length=6)

  plt.title("500 MB Height (dm) and Wind Speed (kt) %s" %p.Time['Time'].values)
  
  images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01' 
  #plt.savefig(f"{images_dir}/Geopotential_%s.png" %i,bbox_inches='tight')
  plt.show()

# Temperatura
ll = len(ncfile.dimensions['Time']) 

for i in range (15, 22): 
  fig = plt.figure(figsize=(12,9))
  ax = plt.axes()
  mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
             resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50 )
  centerlon = -51.25
  centerlat = -27.05
  equi(mp, centerlon, centerlat, 3,lw=2.,color='white')

  mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')

  # Convert the lat/lon coordinates to x/y coordinates in the projection space
  x, y = bm(to_np(lons), to_np(lats))
  temp = getvar(ncfile, "tc",i)
  levels = np.arange(14, 28, )
  a =  temp.data[0,:,:]
  #bm.contour(x, y, to_np(a))
  cs = mp.contourf(x, y, to_np(a), cmap=get_cmap("rainbow"),extende="both")
  plt.colorbar(cs, ax=ax, orientation="horizontal", pad=0.1)
  plt.title("Temperature %s" %temp.Time['Time'].values)

## helicidade 
for i in range (15, 22): 
  fig = plt.figure(figsize=(5,5))
  ax = plt.axes()
  p = getvar(ncfile, "pressure",i)
  # Convert the lat/lon coordinates to x/y coordinates in the projection space
  x, y = bm(to_np(lons), to_np(lats))
  mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
             resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50 )

  centerlon = -51.25
  centerlat = -27.05
  equi(mp, centerlon, centerlat, 3,lw=2.,color='white')
  mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')

  helicity = getvar(ncfile,"updraft_helicity",i)
  levels = np.arange(-10,10,)
  mp = mp.contourf(x, y, to_np(helicity),cmap=get_cmap("rainbow"),levels=levels,extend="both")
  plt.clabel(contours, inline=1, fontsize=10, fmt="%i")
  mp = plt.colorbar(mp, ax=ax, orientation="horizontal", pad=0.1)
  mp.ax.set_title('m²/s²')
  plt.title("Helicity %s" %helicity.Time['Time'].values)
  images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01' 
  plt.savefig(f"{images_dir}/%s_helicity.png" %i,bbox_inches='tight')

import os
import imageio

png_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01'
images = []
for file_name in os.listdir(png_dir):
    if file_name.endswith('helicity.png'):
        file_path = os.path.join(png_dir, file_name)
        images.append(imageio.imread(file_path))
imageio.mimsave('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01/helicity_movie.gif', images,duration = 0.5)

## vorticidade potencial
for i in range (15, 22): 
  fig = plt.figure(figsize=(5,5))
  ax = plt.axes()
  p = getvar(ncfile, "pressure",i)
  # Convert the lat/lon coordinates to x/y coordinates in the projection space
  x, y = bm(to_np(lons), to_np(lats))
  mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
             resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50 )

  centerlon = -51.25
  centerlat = -27.05
  equi(mp, centerlon, centerlat, 3,lw=2.,color='white')
  mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')

  #levels = [-0.024,-0.02,-0.016,-0.012,-0.008, -0.004, 0, 0.004, 0.008,0.012, 0.016,0.02,0.024]
  vorticity = getvar(ncfile,"pvo",i)
  a = vorticity.data[0,:,:]
  levels = np.arange(-30,30,)
  mp = mp.contourf(x, y, to_np(a),cmap=get_cmap("rainbow"),levels=levels,extend="both")
  plt.clabel(contours, inline=1, fontsize=10, fmt="%i")
  a= plt.colorbar(mp, ax=ax, orientation="horizontal", pad=0.1)
  a.ax.set_title('PVU')
  plt.title("Potential Vorticity %s" %p.Time['Time'].values)
  images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01' 
  plt.savefig(f"{images_dir}/%s_pvu.png" %i,bbox_inches='tight')

png_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01'
images = []
for file_name in os.listdir(png_dir):
    if file_name.endswith('pvu.png'):
        file_path = os.path.join(png_dir, file_name)
        images.append(imageio.imread(file_path))
imageio.mimsave('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01/pvu_movie.gif', images,duration = 0.5)

## água precipitável
for i in range (15, 22): 
  fig = plt.figure(figsize=(5,5))
  ax = plt.axes()
  p = getvar(ncfile, "pressure",i)
  # Convert the lat/lon coordinates to x/y coordinates in the projection space
  x, y = bm(to_np(lons), to_np(lats))
  mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
             resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50 )
  centerlon = -51.25
  centerlat = -27.05
  equi(mp, centerlon, centerlat, 3,lw=2.,color='white')
  mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')

  #levels = [-0.024,-0.02,-0.016,-0.012,-0.008, -0.004, 0, 0.004, 0.008,0.012, 0.016,0.02,0.024]
  pwater = getvar(ncfile,"pw",i)
  levels = np.arange(0,50,5)
  mp = mp.contourf(x, y, to_np(pwater),cmap=get_cmap("rainbow"),levels=levels,extend="both")
  plt.clabel(contours, inline=1, fontsize=10, fmt="%i")
  a = plt.colorbar(mp, ax=ax, orientation="horizontal", pad=0.1)
  a.ax.set_title('mm')
  plt.title("Precipitable Water %s" %p.Time['Time'].values)
  images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01' 
  plt.savefig(f"{images_dir}/%s_precip_water.png" %i,bbox_inches='tight')

png_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01'
images = []
for file_name in os.listdir(png_dir):
    if file_name.endswith('precip_water.png'):
        file_path = os.path.join(png_dir, file_name)
        images.append(imageio.imread(file_path))
imageio.mimsave('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01/precip_water_movie.gif', images,duration = 0.5)

## CAPE 2d
for i in range (15, 22): 
  fig = plt.figure(figsize=(5,5))
  ax = plt.axes()
  p = getvar(ncfile, "pressure",i)
  # Convert the lat/lon coordinates to x/y coordinates in the projection space
  x, y = bm(to_np(lons), to_np(lats))
  mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
              resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50 )
  centerlon = -51.25
  centerlat = -27.05
  equi(mp, centerlon, centerlat, 3,lw=2.,color='white')
  mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')
  #levels = [-0.024,-0.02,-0.016,-0.012,-0.008, -0.004, 0, 0.004, 0.008,0.012, 0.016,0.02,0.024]
  cape2d = getvar(ncfile,"cape_2d",i)
  levels = np.arange(0,3000,)
  a = cape2d[0,:,:]
  mp = mp.contourf(x, y, to_np(a),cmap=get_cmap("rainbow"),levels=levels,extend="both")
  plt.clabel(contours, inline=1, fontsize=10, fmt="%i")
  a = plt.colorbar(mp, ax=ax, orientation="horizontal", pad=0.1)
  plt.title("CAPE %s" %cape2d['Time'].values)
  a.ax.set_title('J/kg')
  images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01' 
  plt.savefig(f"{images_dir}/%s_cape.png" %i,bbox_inches='tight')

png_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01'
images = []
for file_name in os.listdir(png_dir):
    if file_name.endswith('cape.png'):
        file_path = os.path.join(png_dir, file_name)
        images.append(imageio.imread(file_path))
imageio.mimsave('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01/cape_movie.gif', images,duration = 0.5)

## CIN 2d
for i in range (15, 22): 
  fig = plt.figure(figsize=(5,5))
  ax = plt.axes()
  p = getvar(ncfile, "pressure",i)
  # Convert the lat/lon coordinates to x/y coordinates in the projection space
  x, y = bm(to_np(lons), to_np(lats))
  mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
              resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50 )
  centerlon = -51.25
  centerlat = -27.05
  equi(mp, centerlon, centerlat, 3,lw=2.,color='white')
  mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')
  #levels = [-0.024,-0.02,-0.016,-0.012,-0.008, -0.004, 0, 0.004, 0.008,0.012, 0.016,0.02,0.024]
  cape2d = getvar(ncfile,"cape_2d",i)
  levels = np.arange(0,200,)
  a = cape2d[1,:,:]
  mp = mp.contourf(x, y, to_np(a),cmap=get_cmap("rainbow"),levels=levels,extend="both")
  plt.clabel(contours, inline=1, fontsize=10, fmt="%i")
  a = plt.colorbar(mp, ax=ax, orientation="horizontal", pad=0.1)
  plt.title("CIN %s" %cape2d['Time'].values)
  a.ax.set_title('J/kg')
  images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01' 
  plt.savefig(f"{images_dir}/%s_cin.png" %i,bbox_inches='tight')

import os
import imageio

png_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01'
images = []
for file_name in os.listdir(png_dir):
    if file_name.endswith('cin.png'):
        file_path = os.path.join(png_dir, file_name)
        images.append(imageio.imread(file_path))
imageio.mimsave('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01/cin_movie.gif', images,duration = 0.5)

## cloud fraction
for i in range (15, 22): 
  fig = plt.figure(figsize=(5,5))
  ax = plt.axes()
  p = getvar(ncfile, "pressure",i)
  # Convert the lat/lon coordinates to x/y coordinates in the projection space
  x, y = bm(to_np(lons), to_np(lats))
  mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
              resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50 )
  centerlon = -51.25
  centerlat = -27.05
  equi(mp, centerlon, centerlat, 3,lw=2.,color='white')
  mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')
  #levels = [-0.024,-0.02,-0.016,-0.012,-0.008, -0.004, 0, 0.004, 0.008,0.012, 0.016,0.02,0.024]
  cfrac = getvar(ncfile,"cloudfrac",i)
  levels = np.arange(0,1,0.1)
  a = cfrac[0,:,:] #baixas 
  mp = mp.contourf(x, y, to_np(a),cmap=get_cmap("rainbow"),levels=levels, extend="both")
  plt.clabel(contours, inline=1, fontsize=10, fmt="%i")
  a = plt.colorbar(mp, ax=ax, orientation="horizontal", pad=0.1)
  a.ax.set_title('%')
  plt.title("Fração de nuvens baixas %s" %cfrac['Time'].values)
  images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01' 
  plt.savefig(f"{images_dir}/%s_low_cloud.png" %i,bbox_inches='tight')

png_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01'
images = []
for file_name in os.listdir(png_dir):
    if file_name.endswith('low_cloud.png'):
        file_path = os.path.join(png_dir, file_name)
        images.append(imageio.imread(file_path))
imageio.mimsave('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01/low_cloud_movie.gif', images,duration = 0.5)

## cloud fraction medium
for i in range (15, 22): 
  fig = plt.figure(figsize=(5,5))
  ax = plt.axes()
  p = getvar(ncfile, "pressure",i)
  # Convert the lat/lon coordinates to x/y coordinates in the projection space
  x, y = bm(to_np(lons), to_np(lats))
  mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
              resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50 )
  centerlon = -51.25
  centerlat = -27.05
  equi(mp, centerlon, centerlat, 3,lw=2.,color='white')
  mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')
  #levels = [-0.024,-0.02,-0.016,-0.012,-0.008, -0.004, 0, 0.004, 0.008,0.012, 0.016,0.02,0.024]
  cfrac = getvar(ncfile,"cloudfrac",i)
  levels = np.arange(0,1,0.1)
  a = cfrac[1,:,:] #medias 
  mp = mp.contourf(x, y, to_np(a),cmap=get_cmap("rainbow"),levels=levels, extend="both")
  plt.clabel(contours, inline=1, fontsize=10, fmt="%i")
  a = plt.colorbar(mp, ax=ax, orientation="horizontal", pad=0.1)
  a.ax.set_title('%')
  plt.title("Fração de nuvens médias %s" %cfrac['Time'].values)
  images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01' 
  plt.savefig(f"{images_dir}/%s_mid_cloud.png" %i,bbox_inches='tight')

png_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01'
images = []
for file_name in os.listdir(png_dir):
    if file_name.endswith('mid_cloud.png'):
        file_path = os.path.join(png_dir, file_name)
        images.append(imageio.imread(file_path))
imageio.mimsave('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01/mid_cloud_movie.gif', images,duration = 0.5)

## cloud fraction high
for i in range (15, 22): 
  fig = plt.figure(figsize=(5,5))
  ax = plt.axes()
  # Convert the lat/lon coordinates to x/y coordinates in the projection space
  x, y = bm(to_np(lons), to_np(lats))
  mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
              resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50)
  mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')
  centerlon = -51.25
  centerlat = -27.05
  equi(mp, centerlon, centerlat, 3,lw=2.,color='white')

  #levels = [-0.024,-0.02,-0.016,-0.012,-0.008, -0.004, 0, 0.004, 0.008,0.012, 0.016,0.02,0.024]
  cfrac = getvar(ncfile,"cloudfrac",i)
  levels = np.arange(0,1,0.1)
  a = cfrac[2,:,:] #altas
  mp = mp.contourf(x, y, to_np(a),cmap=get_cmap("rainbow"),levels=levels,extend="both")
  plt.clabel(contours, inline=1, fontsize=10, fmt="%i")
  a = plt.colorbar(mp, ax=ax, orientation="horizontal", pad=0.1)
  a.ax.set_title('%')
  images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01' 
  plt.title("Fração de nuvens altas %s" %cfrac['Time'].values)
  plt.savefig(f"{images_dir}/%s_high_cloud.png" %i,bbox_inches='tight')

png_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01'
images = []
for file_name in os.listdir(png_dir):
    if file_name.endswith('high_cloud.png'):
        file_path = os.path.join(png_dir, file_name)
        images.append(imageio.imread(file_path))
imageio.mimsave('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01/high_cloud_movie.gif', images,duration = 0.5)

## velocidade vertical
for i in range (15, 22): 
  p = getvar(ncfile, "pressure",i)
  fig = plt.figure(figsize=(5,5))
  ax = plt.axes()
  # Convert the lat/lon coordinates to x/y coordinates in the projection space
  x, y = bm(to_np(lons), to_np(lats))
  mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
             resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50)
  centerlon = -51.25
  centerlat = -27.05
  equi(mp, centerlon, centerlat, 3,lw=2.,color='white')
  mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')
  #levels = [-0.024,-0.02,-0.016,-0.012,-0.008, -0.004, 0, 0.004, 0.008,0.012, 0.016,0.02,0.024]
  p = getvar(ncfile, "pressure",i)
  omega = getvar(ncfile,"omg",i)
  levels = np.arange(-16,8,)
  a = omega[0,:,:]
  mp = mp.contourf(x, y, to_np(a),cmap=get_cmap("rainbow"),levels=levels,extend="both")
  plt.clabel(contours, inline=1, fontsize=10, fmt="%i")
  a = plt.colorbar(mp, ax=ax, orientation="horizontal", pad=0.1)
  plt.title("Velocidade Vertical %s" %omega.Time['Time'].values)
  a.ax.set_title('Pa/s')
  images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01' 
  plt.savefig(f"{images_dir}/%s_omega.png" %i,bbox_inches='tight')

png_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01'
images = []
for file_name in os.listdir(png_dir):
    if file_name.endswith('omega.png'):
        file_path = os.path.join(png_dir, file_name)
        images.append(imageio.imread(file_path))
imageio.mimsave('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01/omega_movie.gif', images,duration = 0.5)

## precipitação convectiva
for i in range (15, 22): 
  
  fig = plt.figure(figsize=(5,5))
  ax = plt.axes()
  # Convert the lat/lon coordinates to x/y coordinates in the projection space
  x, y = bm(to_np(lons), to_np(lats))
  mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
             resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50)
  centerlon = -51.25
  centerlat = -27.05
  equi(mp, centerlon, centerlat, 3,lw=2.,color='white')
  mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')
  #levels = [-0.024,-0.02,-0.016,-0.012,-0.008, -0.004, 0, 0.004, 0.008,0.012, 0.016,0.02,0.024]
  p = getvar(ncfile, "pressure",i)
  rain = getvar(ncfile,"RAINC",i)
  levels = np.arange(0,30,3)
  mp = mp.contourf(x, y, rain,cmap=get_cmap("rainbow"),levels=levels,extend="both")
  plt.clabel(contours, inline=1, fontsize=10, fmt="%i")
  a = plt.colorbar(mp, ax=ax, orientation="horizontal", pad=0.1)
  plt.title("Accumulated total cumulus precipitations %s" %rain.Time['Time'].values)
  a.ax.set_title('mm')
  images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01' 
  plt.savefig(f"{images_dir}/%s_rain.png" %i,bbox_inches='tight')

png_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01'
images = []
for file_name in os.listdir(png_dir):
    if file_name.endswith('rain.png'):
        file_path = os.path.join(png_dir, file_name)
        images.append(imageio.imread(file_path))
imageio.mimsave('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01/rain_movie.gif', images,duration = 0.5)

## graupel
for i in range (15, 22): 
  fig = plt.figure(figsize=(5,5))
  ax = plt.axes()
  # Convert the lat/lon coordinates to x/y coordinates in the projection space
  x, y = bm(to_np(lons), to_np(lats))
  mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
             resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50)
  centerlon = -51.25
  centerlat = -27.05
  equi(mp, centerlon, centerlat, 3,lw=2.,color='white')
  mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')
  #levels = [-0.024,-0.02,-0.016,-0.012,-0.008, -0.004, 0, 0.004, 0.008,0.012, 0.016,0.02,0.024]
  p = getvar(ncfile, "pressure",i)
  grau = getvar(ncfile,"GRAUPELNC",i)
  levels = np.arange(0,5,0.5)
  mp = mp.contourf(x, y, grau,cmap=get_cmap("rainbow"),extend="both")
  plt.clabel(contours, inline=1, fontsize=10, fmt="%i")
  a = plt.colorbar(mp, ax=ax, orientation="horizontal", pad=0.1)
  plt.title("Daily total graupel %s" %grau.Time['Time'].values)
  a.ax.set_title('mm')
  images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01' 
  plt.savefig(f"{images_dir}/%s_graupel.png" %i,bbox_inches='tight')

png_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01'
images = []
for file_name in os.listdir(png_dir):
    if file_name.endswith('graupel.png'):
        file_path = os.path.join(png_dir, file_name)
        images.append(imageio.imread(file_path))
imageio.mimsave('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01/graupel_movie.gif', images,duration = 0.5)

## granizo
for i in range (15, 22): 
  fig = plt.figure(figsize=(5,5))
  ax = plt.axes()
  # Convert the lat/lon coordinates to x/y coordinates in the projection space
  x, y = bm(to_np(lons), to_np(lats))
  mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
             resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50)
  centerlon = -51.25
  centerlat = -27.05
  equi(mp, centerlon, centerlat, 3,lw=2.,color='white')

  mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')
  #levels = [-0.024,-0.02,-0.016,-0.012,-0.008, -0.004, 0, 0.004, 0.008,0.012, 0.016,0.02,0.024]
  p = getvar(ncfile, "pressure",i)
  grani = getvar(ncfile,"HAILNC",i)
  levels = np.arange(0,5,0.5)
  mp = mp.contourf(x, y, grani,cmap=get_cmap("rainbow"),extend="both")
  plt.clabel(contours, inline=1, fontsize=10, fmt="%i")
  a = plt.colorbar(mp, ax=ax, orientation="horizontal", pad=0.1)
  plt.title("Daily total hail %s" %grani.Time['Time'].values)
  a.ax.set_title('mm')
  images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01' 
  plt.savefig(f"{images_dir}/%s_hail.png" %i,bbox_inches='tight')

png_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01'
images = []
for file_name in os.listdir(png_dir):
    if file_name.endswith('hail.png'):
        file_path = os.path.join(png_dir, file_name)
        images.append(imageio.imread(file_path))
imageio.mimsave('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01/hail_movie.gif', images,duration = 0.5)

## OLR
for i in range (15, 22): 
  fig = plt.figure(figsize=(5,5))
  ax = plt.axes()
  # Convert the lat/lon coordinates to x/y coordinates in the projection space
  x, y = bm(to_np(lons), to_np(lats))
  mp = Basemap(llcrnrlon=np.min(lats['XLONG']),llcrnrlat=np.min(lats['XLAT']),urcrnrlon=np.max(lats['XLONG']),urcrnrlat=np.max(lats['XLAT']),
             resolution='i', projection='tmerc', lat_0 =-28.8, lon_0 =-50)
  centerlon = -51.25
  centerlat = -27.05
  equi(mp, centerlon, centerlat, 3,lw=2.,color='white')

  mp.readshapefile('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/shapefile/BR_Micro',name="municipios_br",default_encoding='ISO-8859-1')
  #levels = [-0.024,-0.02,-0.016,-0.012,-0.008, -0.004, 0, 0.004, 0.008,0.012, 0.016,0.02,0.024]
  p = getvar(ncfile, "pressure",i)
  grani = getvar(ncfile,"OLR",i)
  levels = np.arange(100,300,)
  mp = mp.contourf(x, y, grani,cmap=get_cmap("rainbow"),levels=levels,extend="both")
  plt.clabel(contours, inline=1, fontsize=10, fmt="%i")
  a = plt.colorbar(mp, ax=ax, orientation="horizontal", pad=0.1)
  plt.title("TOA outgoing longwave %s" %p.Time['Time'].values)
  images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01' 
  a.ax.set_title('W/m²')
  plt.savefig(f"{images_dir}/%s_OLR.png" %i,bbox_inches='tight')

png_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01'
images = []
for file_name in os.listdir(png_dir):
    if file_name.endswith('OLR.png'):
        file_path = os.path.join(png_dir, file_name)
        images.append(imageio.imread(file_path))
imageio.mimsave('/content/drive/MyDrive/Meteorologia - UFSC/11_Fase/Meso/seminario2/d01/OLR_movie.gif', images,duration = 0.5)

ncfile

temp = getvar(ncfile, "TH2")
 #wv_mr = #water vapor mixing ratio
 rain = getvar(ncfile, "RAINC",2)
 #wrf.ctt(p,) #calcula a temperatura do topo das nuvens

rain


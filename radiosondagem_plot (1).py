# -*- coding: utf-8 -*-
"""radiosondagem_plot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NQwfKZzH-wprGzEWWrZd-byk1YLwIrJI
"""

import os
os.chdir('/content/drive/MyDrive/Meteorologia - UFSC/11ª Fase/Meso')  # Provide the new path here

pip install metpy

pip install siphon

from datetime import datetime

from metpy.units import units

from siphon.simplewebservice.wyoming import WyomingUpperAir

date = datetime(2018, 3, 23, 00) # dia de tempestade
#date = datetime(2020, 9, 26, 12) # dia neutro
#date = datetime(2020, 5, 8, 12) # dia estável
#date = datetime(2021, 2, 19, 00) # dia estável


station = 'SBFI'

df = WyomingUpperAir.request_data(date, station)
df

pressure = df['pressure'].values * units(df.units['pressure'])
temperature = df['temperature'].values * units(df.units['temperature'])
dewpoint = df['dewpoint'].values * units(df.units['dewpoint'])
u_wind = df['u_wind'].values * units(df.units['u_wind'])
v_wind = df['v_wind'].values * units(df.units['v_wind'])
wind_speed = df['speed'].values * units.knots
wind_dir = df['direction'].values * units.degrees

import metpy.calc as mpcalc

# Calculate the LCL
lcl_pressure, lcl_temperature = mpcalc.lcl(pressure[0], temperature[0], dewpoint[0])

print(lcl_pressure, lcl_temperature)

# Calculate the parcel profile.
parcel_prof = mpcalc.parcel_profile(pressure, temperature[0], dewpoint[0]).to('degC')

import matplotlib.pyplot as plt
from metpy.plots import Hodograph, SkewT
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
import matplotlib.gridspec as gridspec

fig = plt.figure(figsize=(9, 9))
skew = SkewT(fig)
gs = gridspec.GridSpec(3, 3)

# Plot the data using normal plotting functions, in this case using
# log scaling in Y, as dictated by the typical meteorological plot
skew.plot(pressure, temperature, 'r', linewidth=2)
skew.plot(pressure, dewpoint, 'g', linewidth=2)
skew.plot_barbs(pressure, u_wind, v_wind)

# Plot LCL temperature as black dot
skew.plot(lcl_pressure, lcl_temperature, 'ko', markerfacecolor='black')

# Plot the parcel profile as a black line
skew.plot(pressure, parcel_prof, 'k', linewidth=2)

# Shade areas of CAPE and CIN
#skew.shade_cin(pressure, temperature, parcel_prof, dewpoint)
#skew.shade_cin(pressure[0:75], temperature[0:75], parcel_prof[0:75], dewpoint[0:75])
skew.shade_cape(pressure, temperature, parcel_prof)

# Plot a zero degree isotherm
skew.ax.axvline(0, color='c', linestyle='--', linewidth=2)

# Add the relevant special lines
skew.plot_dry_adiabats()
skew.plot_moist_adiabats()
skew.plot_mixing_lines()

# Create a hodograph
# Create an inset axes object that is 40% width and height of the
# figure and put it in the upper right hand corner.
#ax_hod = inset_axes(skew.ax, '40%', '40%', loc=1)
#h = Hodograph(ax_hod, component_range=80.)
#h.add_grid(increment=20)
#h.plot_colormapped(u_wind, v_wind, wind_speed)  # Plot a line colored by wind speed

# Good bounds for aspect ratio
skew.ax.set_xlim(-30, 40)

# Create a hodograph
ax = fig.add_subplot(gs[0, -2])
h = Hodograph(ax, component_range=60.)
h.add_grid(increment=20)
h.plot(u_wind, v_wind)

images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11ª Fase/Meso' 
#plt.savefig(f"{images_dir}/skew_estavel.png",bbox_inches='tight')

# Show the plot
plt.show()

# cape e cin 
cape_cine = mpcalc.cape_cin(pressure, temperature, dewpoint,parcel_prof)
print('CAPE %s e CIN %s ' %(cape_cine[0],cape_cine[1]))

# cape e cin da camada mais instável 
cape_cine_instavel = mpcalc.most_unstable_cape_cin(pressure,temperature,dewpoint)
print('CAPE %s e CIN %s da camada mais instável' %(cape_cine_instavel[0],cape_cine_instavel[1]))

import numpy as np

# calculando a temperatura potencial 
potential_temp = mpcalc.potential_temperature(pressure,temperature)
potential_temp

# calculando a temperatura potencial equivalente
potential_temp_e = mpcalc.equivalent_potential_temperature(pressure,temperature,dewpoint)
potential_temp_e

#plotando 
# plotando fig = plt.figure(figsize=(6, 6))
plt.scatter(potential_temp_e.magnitude,potential_temp.magnitude, s=10)
plt.ylim([250,610])
plt.xlim([250,610])
#plt.title('Dispersão Frequência de Brunt Vaisala')
plt.xlabel('Temperatura Potencial Equivalente (K)')
plt.ylabel('Temperatura Potencial (K) ')
plt.grid()

height = df['height'].values * units.meters
height.units

# plotando as temperaturas potencial e potencial e equivalente
fig = plt.figure(figsize=(6, 6))
plt.scatter(potential_temp_e.magnitude,height.magnitude, s=10)
plt.plot(potential_temp_e.magnitude,height.magnitude)
plt.scatter(potential_temp.magnitude, height.magnitude, s=10)
plt.plot(potential_temp.magnitude, height.magnitude)
plt.legend(['Equivalent Potential Temperature', 'Potential Temperature'])
plt.ylim([0,25000])
plt.xlim([250,610])
plt.xlabel('Temperature (K)')
plt.ylabel('Height (m) ')
plt.grid()
images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11ª Fase/Meso' 
#plt.savefig(f"{images_dir}/temperature_estavel.png",bbox_inches='tight')

# Calculando a frequência de Brunt Vaisala 
from metpy.units import units
height = df['height'].values * units.meters
height
nsq_theta = mpcalc.brunt_vaisala_frequency_squared(height,potential_temp)
nsq_theta_e = mpcalc.brunt_vaisala_frequency_squared(height,potential_temp_e)

# plotando fig = plt.figure(figsize=(6, 6))
plt.scatter(nsq_theta.magnitude,nsq_theta_e.magnitude,s=10)
plt.title('Dispersão Frequência de Brunt Vaisala')
plt.ylim([0,0.07])
plt.xlim([0,0.05])
plt.xlabel('Nsq (1/s)')
plt.ylabel('Nsqe (1/s) ')
plt.grid()

# Plotando frequencia de Brunt Vaisala x Pressão 
fig = plt.figure(figsize=(6, 4))
plt.scatter(nsq_theta.magnitude,height.magnitude,s=10)
plt.plot(nsq_theta.magnitude,height.magnitude)
plt.scatter(nsq_theta_e.magnitude,height.magnitude,s=10)
plt.plot(nsq_theta_e.magnitude,height.magnitude)
plt.title('Brunt-Vaisala Frequency - Instable Case')
plt.legend(['Pot. Temp.', 'Equivalent Pot. Temp.'])
plt.ylim([0,25000])
plt.xlim([-5E-3,2E-3])
plt.ticklabel_format(axis="x", style="sci", scilimits=(0,0))
plt.xlabel('Nsq (1/s)')
plt.ylabel('Height (m)')
plt.grid()
images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11ª Fase/Meso' 
#plt.savefig(f"{images_dir}/NSQ_instavel.png",bbox_inches='tight')

# Plotando frequencia de Brunt Vaisala x Altura 
plt.scatter(nsq_theta.magnitude,height.magnitude,s=10)
plt.title('Dispersão Frequência de Brunt Vaisala')
plt.ylim([0,25000])
plt.xlim([0,0.05])
plt.xlabel('Nsq (1/s)')
plt.ylabel('Altura (m) ')
plt.grid()

#helicidade 
helicity_3k = mpcalc.storm_relative_helicity(height,u_wind,v_wind,depth=3000 *units.meter)
print('Helicidade Positiva %s Helicidade negativa %s e Helicidade total %s' %(helicity_3k[0],helicity_3k[1],helicity_3k[2]))

#wind shear
shear_3k = mpcalc.bulk_shear(pressure, u_wind, v_wind)
print('Cisalhamento u %s e v %s ' %(shear_3k[0],shear_3k[0]))

#calculando o modulo do wind shear 
shear_3k_abs =  np.sqrt((shear_3k[0]*shear_3k[0])+(shear_3k[1]*shear_3k[1]))
print('Módulo do cisalhamento %s ' %shear_3k_abs)

#água precipitável 
precip_w = mpcalc.precipitable_water(pressure,dewpoint)
print('Água precipitável %s ' %precip_w)

# indice de levantamento 
lif_i =  mpcalc.lifted_index(pressure,temperature,parcel_prof)
print('Índice de levantamento %s' %lif_i)

# perfil vertical de velocidades
plt.plot(wind_speed,pressure.magnitude)
plt.xlim([0,120])
plt.ylim([1000,0])
plt.title('Wind vertical profile - Instable Case')
plt.xlabel('Wind speed (kt)')
plt.ylabel('Pressure (hPa) ')
plt.grid()
images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11ª Fase/Meso' 
#plt.savefig(f"{images_dir}/WP_instavel.png",bbox_inches='tight')

# Commented out IPython magic to ensure Python compatibility.
!sudo apt-get install html2text
!sudo apt-get install vim
!pip install datetime 
import subprocess
import pandas as pd


station = '83827' # Exemplo para Floripa é 83899 
yy=2020
mm=5
dd=8
hh=12
date = datetime(yy, mm, dd, hh) # Cuidado com os horarios (normalmente tem as 12Z)
f = open('header.txt', "w+")
f.write(station+' '+str(yy)+' '+str(mm)+' '+str(dd)+' '+str(hh))
f.write('\n')
f.close()
!cat header.txt

sounding="http://weather.uwyo.edu/cgi-bin/sounding?region=samer&TYPE=TEXT%3ALIST&YEAR="+str(yy)+"&MONTH="+str(mm)+"&FROM="+str(dd)+str(hh)+"&TO="+str(dd)+str(hh)+"&STNM="+station
output = subprocess.run(["wget",sounding , '-O','sounding.htm'])

! cat sounding.htm | html2text -o sounding.txt
sounding

!wget https://ocw.mit.edu/courses/earth-atmospheric-and-planetary-sciences/12-811-tropical-meteorology-spring-2011/tools/wyoming.f

!gfortran -o wyoming.exe wyoming.f

!./wyoming.exe


pp=pd.read_fwf('p.out',names=['P'])
porig=pd.read_fwf('porig.out',names=['Porig'])
tdifrev=pd.read_fwf('tdifrev.out')
tdifpseudo=pd.read_fwf('tdifpseudo.out')
f=open('header.txt','r')
[name,time,month,date,year]=[station,yy,mm,dd,hh]
modsound=pd.read_fwf('modsound.txt',names=['Pr','Temp','Rh'])

pr=modsound['Pr'];
tc=modsound['Temp'];
rh=modsound['Rh'];

X, Y = np.meshgrid(porig,pp.iloc[0:-1])

from IPython.display import set_matplotlib_formats
# %matplotlib inline
set_matplotlib_formats('svg')

import matplotlib.pyplot as plt
from matplotlib import rcParams


# Initialize plot objects
rcParams['figure.figsize'] = 5, 5 # sets plot size
fig = plt.figure()
title='Mean Pseudo-adiabatic Density Temperature Difference (K)\n \
Station = '+ str(name)+ '   '+ str(hh)+ 'Z '+ str(dd) +' '+ str(mm) +' '+ str(yy);
fig.suptitle(title, fontsize=12)
ax = fig.add_subplot(111)

# Generate a contour plot
cp = ax.contourf(X, Y, tdifpseudo);cmap='jet'
ax.clabel(cp, inline=1,fmt='%2.1f', colors='w',  fontsize=10)
fig.colorbar(cp, orientation='horizontal')
cp= ax.invert_yaxis()
cp= ax.invert_xaxis()
ax.set_xlabel('Parcel Origin Pressure (mb)', fontsize=10)        
ax.set_ylabel('Pressure to which Parcel is Lifted (mb)', fontsize=10)
images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11ª Fase/Meso' 
#plt.savefig(f"{images_dir}/Pseudo_adiabatica_estavel.png",bbox_inches='tight')

# Initialize plot objects
rcParams['figure.figsize'] = 5, 5 # sets plot size
fig = plt.figure()
title='Mean Reversible Density Temperature Difference (K)\n \
Station = '+ str(name)+ '   '+ str(hh)+ 'Z '+ str(dd) +' '+ str(mm) +' '+ str(yy);
fig.suptitle(title, fontsize=12)
ax = fig.add_subplot(111)

# Generate a contour plot
cp = ax.contourf(X, Y, tdifrev)
ax.clabel(cp, inline=1,fmt='%2.1f', colors='w',  fontsize=10)
fig.colorbar(cp, orientation='horizontal')
cp= ax.invert_yaxis()
cp= ax.invert_xaxis()


ax.set_xlabel('Parcel Origin Pressure (mb)', fontsize=10)        
ax.set_ylabel('Pressure to which Parcel is Lifted (mb)', fontsize=10)
images_dir = '/content/drive/MyDrive/Meteorologia - UFSC/11ª Fase/Meso' 
#plt.savefig(f"{images_dir}/Tdensidade_estavel.png",bbox_inches='tight')

